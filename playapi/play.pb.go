// Code generated by protoc-gen-go. DO NOT EDIT.
// source: playapi/play.proto

package playapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StringObject struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringObject) Reset()         { *m = StringObject{} }
func (m *StringObject) String() string { return proto.CompactTextString(m) }
func (*StringObject) ProtoMessage()    {}
func (*StringObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_7f785f22c603fbca, []int{0}
}
func (m *StringObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringObject.Unmarshal(m, b)
}
func (m *StringObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringObject.Marshal(b, m, deterministic)
}
func (dst *StringObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringObject.Merge(dst, src)
}
func (m *StringObject) XXX_Size() int {
	return xxx_messageInfo_StringObject.Size(m)
}
func (m *StringObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StringObject.DiscardUnknown(m)
}

var xxx_messageInfo_StringObject proto.InternalMessageInfo

func (m *StringObject) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_7f785f22c603fbca, []int{1}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StringObject)(nil), "playapi.StringObject")
	proto.RegisterType((*Void)(nil), "playapi.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlaygroundClient is the client API for Playground service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlaygroundClient interface {
	DeepPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StringObject, error)
	InvokePanic(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	GetReceiveStream(ctx context.Context, in *Void, opts ...grpc.CallOption) (Playground_GetReceiveStreamClient, error)
	GetSendStream(ctx context.Context, opts ...grpc.CallOption) (Playground_GetSendStreamClient, error)
}

type playgroundClient struct {
	cc *grpc.ClientConn
}

func NewPlaygroundClient(cc *grpc.ClientConn) PlaygroundClient {
	return &playgroundClient{cc}
}

func (c *playgroundClient) DeepPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StringObject, error) {
	out := new(StringObject)
	err := c.cc.Invoke(ctx, "/playapi.Playground/DeepPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundClient) InvokePanic(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/playapi.Playground/InvokePanic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundClient) GetReceiveStream(ctx context.Context, in *Void, opts ...grpc.CallOption) (Playground_GetReceiveStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Playground_serviceDesc.Streams[0], "/playapi.Playground/GetReceiveStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &playgroundGetReceiveStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Playground_GetReceiveStreamClient interface {
	Recv() (*StringObject, error)
	grpc.ClientStream
}

type playgroundGetReceiveStreamClient struct {
	grpc.ClientStream
}

func (x *playgroundGetReceiveStreamClient) Recv() (*StringObject, error) {
	m := new(StringObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playgroundClient) GetSendStream(ctx context.Context, opts ...grpc.CallOption) (Playground_GetSendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Playground_serviceDesc.Streams[1], "/playapi.Playground/GetSendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &playgroundGetSendStreamClient{stream}
	return x, nil
}

type Playground_GetSendStreamClient interface {
	Send(*StringObject) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type playgroundGetSendStreamClient struct {
	grpc.ClientStream
}

func (x *playgroundGetSendStreamClient) Send(m *StringObject) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playgroundGetSendStreamClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaygroundServer is the server API for Playground service.
type PlaygroundServer interface {
	DeepPing(context.Context, *Void) (*StringObject, error)
	InvokePanic(context.Context, *Void) (*Void, error)
	GetReceiveStream(*Void, Playground_GetReceiveStreamServer) error
	GetSendStream(Playground_GetSendStreamServer) error
}

func RegisterPlaygroundServer(s *grpc.Server, srv PlaygroundServer) {
	s.RegisterService(&_Playground_serviceDesc, srv)
}

func _Playground_DeepPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).DeepPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playapi.Playground/DeepPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).DeepPing(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playground_InvokePanic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).InvokePanic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playapi.Playground/InvokePanic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).InvokePanic(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playground_GetReceiveStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaygroundServer).GetReceiveStream(m, &playgroundGetReceiveStreamServer{stream})
}

type Playground_GetReceiveStreamServer interface {
	Send(*StringObject) error
	grpc.ServerStream
}

type playgroundGetReceiveStreamServer struct {
	grpc.ServerStream
}

func (x *playgroundGetReceiveStreamServer) Send(m *StringObject) error {
	return x.ServerStream.SendMsg(m)
}

func _Playground_GetSendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaygroundServer).GetSendStream(&playgroundGetSendStreamServer{stream})
}

type Playground_GetSendStreamServer interface {
	SendAndClose(*Void) error
	Recv() (*StringObject, error)
	grpc.ServerStream
}

type playgroundGetSendStreamServer struct {
	grpc.ServerStream
}

func (x *playgroundGetSendStreamServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playgroundGetSendStreamServer) Recv() (*StringObject, error) {
	m := new(StringObject)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Playground_serviceDesc = grpc.ServiceDesc{
	ServiceName: "playapi.Playground",
	HandlerType: (*PlaygroundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeepPing",
			Handler:    _Playground_DeepPing_Handler,
		},
		{
			MethodName: "InvokePanic",
			Handler:    _Playground_InvokePanic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReceiveStream",
			Handler:       _Playground_GetReceiveStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSendStream",
			Handler:       _Playground_GetSendStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "playapi/play.proto",
}

func init() { proto.RegisterFile("playapi/play.proto", fileDescriptor_play_7f785f22c603fbca) }

var fileDescriptor_play_7f785f22c603fbca = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xc8, 0x49, 0xac,
	0x4c, 0x2c, 0xc8, 0xd4, 0x07, 0xd1, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0x31,
	0x25, 0x15, 0x2e, 0x9e, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0x74, 0xff, 0xa4, 0xac, 0xd4, 0xe4, 0x12,
	0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x08, 0x47, 0x89, 0x8d, 0x8b, 0x25, 0x2c, 0x3f, 0x33, 0xc5, 0xe8, 0x05, 0x23, 0x17, 0x57, 0x40,
	0x4e, 0x62, 0x65, 0x7a, 0x51, 0x7e, 0x69, 0x5e, 0x8a, 0x90, 0x11, 0x17, 0x87, 0x4b, 0x6a, 0x6a,
	0x41, 0x40, 0x66, 0x5e, 0xba, 0x10, 0xaf, 0x1e, 0xd4, 0x48, 0x3d, 0x90, 0x4a, 0x29, 0x51, 0x38,
	0x17, 0xd9, 0x78, 0x25, 0x06, 0x21, 0x5d, 0x2e, 0x6e, 0xcf, 0xbc, 0xb2, 0xfc, 0xec, 0xd4, 0x80,
	0xc4, 0xbc, 0xcc, 0x64, 0x74, 0x6d, 0xa8, 0x5c, 0x25, 0x06, 0x21, 0x1b, 0x2e, 0x01, 0xf7, 0xd4,
	0x92, 0xa0, 0xd4, 0xe4, 0xd4, 0xcc, 0xb2, 0xd4, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0x62, 0xad,
	0x32, 0x60, 0x14, 0xb2, 0xe4, 0xe2, 0x75, 0x4f, 0x2d, 0x09, 0x4e, 0xcd, 0x4b, 0x81, 0x6a, 0xc5,
	0xae, 0x16, 0xc3, 0x5a, 0x0d, 0xc6, 0x24, 0x36, 0x70, 0x40, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x50, 0x87, 0x07, 0xee, 0x3e, 0x01, 0x00, 0x00,
}
